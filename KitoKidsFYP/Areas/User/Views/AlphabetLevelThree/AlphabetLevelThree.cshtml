<!DOCTYPE html>
<html lang="en">
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Image with Letter</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap"
          rel="stylesheet" />
    <!-- Stylesheet -->
    <link rel="stylesheet" href="~/css/alpha3style.css" asp-append-version="true" />
</head>
<body>
    <div class="container">

        <div class="draggable-objects"></div>
        <div class="drop-points"></div>

    </div>

    <div class="controls-container">
        <p id="result"></p>
        <button id="start">Start Game</button>
    </div>







    <!-- Script -->
   <script>
        //Initial References
        let draggableObjects;
        let dropPoints;
        const startButton = document.getElementById("start");
        const result = document.getElementById("result");
        const controls = document.querySelector(".controls-container");
        const dragContainer = document.querySelector(".draggable-objects");
        const dropContainer = document.querySelector(".drop-points");
        const result_box = document.querySelector(".result-box");

        var soundCorrect = new Audio('/Files/rightt.mp3');
        var soundInCorrect = new Audio('/Files/wrong.mp3');


        const data = [
            "banana",
            "orange",
            "apple",
            "mango",
            "strawberry",
            "pineapple"
        ];

        let deviceType = "";
        let initialX = 0,
            initialY = 0;
        let currentElement = "";
        let moveElement = false;

        //Detect touch device
        const isTouchDevice = () => {
            try {
                //We try to create Touch Event (It would fail for desktops and throw error)
                document.createEvent("TouchEvent");
                deviceType = "touch";
                return true;
            } catch (e) {
                deviceType = "mouse";
                return false;
            }
        };

        let count = 0;

        //Random value from Array
        const randomValueGenerator = () => {
            return data[Math.floor(Math.random() * data.length)];
        };

        //Win Game Display
        const stopGame = () => {
            controls.classList.remove("hide");
            startButton.classList.remove("hide");
        };

        //Drag & Drop Functions
        function dragStart(e) {
            if (isTouchDevice()) {
                initialX = e.touches[0].clientX;
                initialY = e.touches[0].clientY;
                //Start movement for touch
                moveElement = true;
                currentElement = e.target;
            } else {
                //For non touch devices set data to be transfered
                e.dataTransfer.setData("text", e.target.id);
            }
        }

        //Events fired on the drop target
        function dragOver(e) {
            e.preventDefault();
        }

        //For touchscreen movement
        const touchMove = (e) => {
            if (moveElement) {
                e.preventDefault();
                let newX = e.touches[0].clientX;
                let newY = e.touches[0].clientY;
                let currentSelectedElement = document.getElementById(e.target.id);
                currentSelectedElement.parentElement.style.top =
                    currentSelectedElement.parentElement.offsetTop - (initialY - newY) + "px";
                currentSelectedElement.parentElement.style.left =
                    currentSelectedElement.parentElement.offsetLeft -
                    (initialX - newX) +
                    "px";
                initialX = newX;
                initialY - newY;
            }
        };

        const drop = (e) => {
            e.preventDefault();
            //For touch screen
            if (isTouchDevice()) {
                moveElement = false;
                //Select country name div using the custom attribute
                const currentDrop = document.querySelector(`div[data-id='${e.target.id}']`);
                //Get boundaries of div
                const currentDropBound = currentDrop.getBoundingClientRect();
                //if the position of flag falls inside the bounds of the countru name
                if (
                    initialX >= currentDropBound.left &&
                    initialX <= currentDropBound.right &&
                    initialY >= currentDropBound.top &&
                    initialY <= currentDropBound.bottom
                ) {
                    currentDrop.classList.add("dropped");
                    //hide actual image
                    currentElement.classList.add("hide");
                    currentDrop.innerHTML = ``;
                    //Insert new img element
                    currentDrop.insertAdjacentHTML(
                        "afterbegin",
                        `<img src= "${currentElement.id}.png">`
                    );
                    count += 1;
                }


            } else {
                //Access data
                const draggedElementData = e.dataTransfer.getData("text");
                //Get custom attribute value
                const droppableElementData = e.target.getAttribute("data-id");
                if (draggedElementData === droppableElementData) {
                    const draggedElement = document.getElementById(draggedElementData);
                    //dropped class
                    e.target.classList.add("dropped");
                    //hide current img
                    draggedElement.classList.add("hide");
                    //draggable set to false
                    draggedElement.setAttribute("draggable", "false");
                    e.target.innerHTML = ``;
                    //insert new img
                    e.target.insertAdjacentHTML(
                        "afterbegin",
                        `<img src="/image/${draggedElementData}.png">`
                    );
                    soundCorrect.play();

                    count += 1;
                    console.log(count);
                }
                else {
                    soundInCorrect.play();
                }
            }
            //Win
            if (count == 3) {
                result.innerText = `You Won!`;
                stopGame();

            }
        };

        //Creates flags and countries
        const creator = () => {
            dragContainer.innerHTML = "";
            dropContainer.innerHTML = "";
            let randomData = [];
            //for string random values in array
            for (let i = 1; i <= 3; i++) {
                let randomValue = randomValueGenerator();
                if (!randomData.includes(randomValue)) {
                    randomData.push(randomValue);
                } else {
                    //If value already exists then decrement i by 1
                    i -= 1;
                }
            }
            for (let i of randomData) {
                const flagDiv = document.createElement("div");
                flagDiv.classList.add("draggable-image");
                flagDiv.setAttribute("draggable", true);
                if (isTouchDevice()) {
                    flagDiv.style.position = "absolute";
                }
                flagDiv.innerHTML = `<img src="/image/${i}.png" id="${i}">`;
                dragContainer.appendChild(flagDiv);
            }
            //Sort the array randomly before creating country divs
            randomData = randomData.sort(() => 0.5 - Math.random());
            for (let i of randomData) {
                const countryDiv = document.createElement("div");
                countryDiv.innerHTML = `<div class='countries' data-id='${i}'>
            ${i.charAt(0).toUpperCase() + i.slice(1).replace("-", " ")}
            </div>
            `;
                dropContainer.appendChild(countryDiv);
            }
        };

        //Start Game
        startButton.addEventListener(
            "click",
            (startGame = async () => {
                currentElement = "";
                controls.classList.add("hide");
                startButton.classList.add("hide");
                //This will wait for creator to create the images and then move forward
                await creator();
                count = 0;
                dropPoints = document.querySelectorAll(".countries");
                draggableObjects = document.querySelectorAll(".draggable-image");

                //Events
                draggableObjects.forEach((element) => {
                    element.addEventListener("dragstart", dragStart);
                    //for touch screen
                    element.addEventListener("touchstart", dragStart);
                    element.addEventListener("touchend", drop);
                    element.addEventListener("touchmove", touchMove);
                });
                dropPoints.forEach((element) => {
                    element.addEventListener("dragover", dragOver);
                    element.addEventListener("drop", drop);
                });
            })
        );

   </script>

 </body>
</html>
